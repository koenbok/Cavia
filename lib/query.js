// Generated by CoffeeScript 1.3.3
(function() {
  var Query, utils, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _ = require("underscore");

  utils = require("./utils");

  Query = (function() {

    function Query(table, input, options) {
      var column, key, operator, result, v, value, values, _i, _j, _len, _len1, _ref, _ref1, _ref2;
      this.table = table;
      this.input = input;
      this.options = options;
      if ((_ref = this.options) == null) {
        this.options = {};
      }
      this.placeholder = (this.options.placeholder != null) || "?";
      result = [];
      values = [];
      if (this.options.columns) {
        result.push("SELECT " + (this.options.columns.join(",")) + " FROM " + table);
      } else {
        result.push("SELECT * FROM " + table);
      }
      _ref1 = this.input;
      for (key in _ref1) {
        value = _ref1[key];
        key = key.split(" ");
        column = key[0];
        operator = key[1];
        if (!column || !operator) {
          throw new Error("Invalid query key: " + key);
        }
        operator = operator.toUpperCase();
        if (result.length === 1) {
          result.push(" WHERE ");
        } else {
          result.push(" AND ");
        }
        if (operator === "=" || operator === ">" || operator === "<" || operator === ">=" || operator === "=<") {
          result.push("" + column + " " + operator + " " + this.placeholder);
          values.push(value);
        } else if (operator === "IN") {
          if (_.isArray(value)) {
            result.push("" + column + " IN (" + (utils.placeholders(value, this.placeholder)) + ")");
            for (_i = 0, _len = value.length; _i < _len; _i++) {
              v = value[_i];
              values.push(v);
            }
          } else if (value.sql && value.val) {
            result.push("" + column + " IN (" + value.sql + ")");
            _ref2 = value.val;
            for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
              v = _ref2[_j];
              values.push(v);
            }
          } else {
            throw new Error("IN operator requires list of values or subquery");
          }
        } else {
          throw new Error("Invalid operator: " + operator);
        }
      }
      this.sql = result.join("");
      this.val = values;
    }

    return Query;

  })();

  exports.SelectQuery = (function(_super) {
    var type;

    __extends(SelectQuery, _super);

    function SelectQuery() {
      return SelectQuery.__super__.constructor.apply(this, arguments);
    }

    type = "select";

    return SelectQuery;

  })(Query);

  exports.DeleteQuery = (function(_super) {
    var type;

    __extends(DeleteQuery, _super);

    function DeleteQuery() {
      return DeleteQuery.__super__.constructor.apply(this, arguments);
    }

    type = "delete";

    return DeleteQuery;

  })(Query);

}).call(this);
